
Gpio_Assembly_keilmdk_vs_gcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000184  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800031c  08000324  00010324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800031c  0800031c  00010324  2**0
                  CONTENTS
  4 .ARM          00000000  0800031c  0800031c  00010324  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800031c  08000324  00010324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800031c  0800031c  0001031c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000320  08000320  00010320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000324  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000324  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010324  2**0
                  CONTENTS, READONLY
 12 .debug_line   00000783  00000000  00000000  00010354  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000005c6  00000000  00000000  00010ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00000151  00000000  00000000  0001109d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000070  00000000  00000000  000111f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0007cdb4  00000000  00000000  00011260  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000038  00000000  00000000  0008e018  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  000127f5  00000000  00000000  0008e050  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a0845  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000084  00000000  00000000  000a08c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000304 	.word	0x08000304

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000304 	.word	0x08000304

080001d8 <main>:
									//THUMB
									//ENTRY
					.globl main		 //EXPORT	__main

main:
					BL		GPIO_Init
 80001d8:	f000 f817 	bl	800020a <GPIO_Init>

080001dc <loop>:

loop:
					BL		get_input
 80001dc:	f000 f810 	bl	8000200 <get_input>
					CMP		R0,#BTN_ON
 80001e0:	2800      	cmp	r0, #0
					BEQ		turn_led_on
 80001e2:	d008      	beq.n	80001f6 <turn_led_on>
					CMP		R0,#BTN_OFF
 80001e4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
					BEQ		turn_led_off
 80001e8:	d000      	beq.n	80001ec <turn_led_off>

					B		loop
 80001ea:	e7f7      	b.n	80001dc <loop>

080001ec <turn_led_off>:



turn_led_off:
					LDR		R2,=GPIOA_BSRR
 80001ec:	4a0f      	ldr	r2, [pc, #60]	; (800022c <GPIO_Init+0x22>)
					MOV		R1,BSRR_5_RESET
 80001ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
					STR		R1,[R2]
 80001f2:	6011      	str	r1, [r2, #0]
					B		loop
 80001f4:	e7f2      	b.n	80001dc <loop>

080001f6 <turn_led_on>:


turn_led_on:
					LDR		R2,=GPIOA_BSRR
 80001f6:	4a0d      	ldr	r2, [pc, #52]	; (800022c <GPIO_Init+0x22>)
					MOV		R1,#BSRR_5_SET
 80001f8:	f04f 0120 	mov.w	r1, #32
					STR		R1,[R2]
 80001fc:	6011      	str	r1, [r2, #0]
					B		loop
 80001fe:	e7ed      	b.n	80001dc <loop>

08000200 <get_input>:

get_input:
					LDR		R1,=GPIOC_IDR
 8000200:	490b      	ldr	r1, [pc, #44]	; (8000230 <GPIO_Init+0x26>)
					LDR		R0,[R1]
 8000202:	6808      	ldr	r0, [r1, #0]
					AND		R0,R0,#BTN_PIN
 8000204:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
					BX		LR
 8000208:	4770      	bx	lr

0800020a <GPIO_Init>:

GPIO_Init:
					//RCC->AHB1ENR  |=GPIOA_EN
					LDR 	R0,=RCC_AHB1ENR
 800020a:	480a      	ldr	r0, [pc, #40]	; (8000234 <GPIO_Init+0x2a>)
					LDR  	R1,[R0]
 800020c:	6801      	ldr	r1, [r0, #0]
					ORR		R1,#GPIOA_EN
 800020e:	f041 0101 	orr.w	r1, r1, #1
					STR		R1,[R0]
 8000212:	6001      	str	r1, [r0, #0]

					//GPIOA->MODER |=MODER5_OUT
					LDR		R0,=GPIOA_MODER
 8000214:	4808      	ldr	r0, [pc, #32]	; (8000238 <GPIO_Init+0x2e>)
					LDR		R1,[R0]
 8000216:	6801      	ldr	r1, [r0, #0]
					ORR		R1,#MODER5_OUT
 8000218:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
					STR		R1,[R0]
 800021c:	6001      	str	r1, [r0, #0]

					//Push button clock init
					//RCC->AHB1ENR |=GPIOC_EN

					LDR		R0,=RCC_AHB1ENR
 800021e:	4805      	ldr	r0, [pc, #20]	; (8000234 <GPIO_Init+0x2a>)
					LDR		R1,[R0]
 8000220:	6801      	ldr	r1, [r0, #0]
					ORR		R1,#GPIOC_EN
 8000222:	f041 0104 	orr.w	r1, r1, #4
					STR		R1,[R0]
 8000226:	6001      	str	r1, [r0, #0]

					BX		LR
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
					LDR		R2,=GPIOA_BSRR
 800022c:	40020018 	.word	0x40020018
					LDR		R1,=GPIOC_IDR
 8000230:	40020810 	.word	0x40020810
					LDR 	R0,=RCC_AHB1ENR
 8000234:	40023830 	.word	0x40023830
					LDR		R0,=GPIOA_MODER
 8000238:	40020000 	.word	0x40020000

0800023c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <SystemInit+0x28>)
 8000242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000246:	4a07      	ldr	r2, [pc, #28]	; (8000264 <SystemInit+0x28>)
 8000248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800024c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000250:	4b04      	ldr	r3, [pc, #16]	; (8000264 <SystemInit+0x28>)
 8000252:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000256:	609a      	str	r2, [r3, #8]
#endif
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	e000ed00 	.word	0xe000ed00

08000268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800026c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800026e:	e003      	b.n	8000278 <LoopCopyDataInit>

08000270 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000272:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000274:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000276:	3104      	adds	r1, #4

08000278 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000278:	480b      	ldr	r0, [pc, #44]	; (80002a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800027a:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800027c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800027e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000280:	d3f6      	bcc.n	8000270 <CopyDataInit>
  ldr  r2, =_sbss
 8000282:	4a0b      	ldr	r2, [pc, #44]	; (80002b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000284:	e002      	b.n	800028c <LoopFillZerobss>

08000286 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000286:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000288:	f842 3b04 	str.w	r3, [r2], #4

0800028c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800028c:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800028e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000290:	d3f9      	bcc.n	8000286 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000292:	f7ff ffd3 	bl	800023c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000296:	f000 f811 	bl	80002bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800029a:	f7ff ff9d 	bl	80001d8 <main>
  bx  lr    
 800029e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80002a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80002a4:	08000324 	.word	0x08000324
  ldr  r0, =_sdata
 80002a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002ac:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80002b0:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 80002b4:	2000001c 	.word	0x2000001c

080002b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002b8:	e7fe      	b.n	80002b8 <ADC_IRQHandler>
	...

080002bc <__libc_init_array>:
 80002bc:	b570      	push	{r4, r5, r6, lr}
 80002be:	4e0d      	ldr	r6, [pc, #52]	; (80002f4 <__libc_init_array+0x38>)
 80002c0:	4c0d      	ldr	r4, [pc, #52]	; (80002f8 <__libc_init_array+0x3c>)
 80002c2:	1ba4      	subs	r4, r4, r6
 80002c4:	10a4      	asrs	r4, r4, #2
 80002c6:	2500      	movs	r5, #0
 80002c8:	42a5      	cmp	r5, r4
 80002ca:	d109      	bne.n	80002e0 <__libc_init_array+0x24>
 80002cc:	4e0b      	ldr	r6, [pc, #44]	; (80002fc <__libc_init_array+0x40>)
 80002ce:	4c0c      	ldr	r4, [pc, #48]	; (8000300 <__libc_init_array+0x44>)
 80002d0:	f000 f818 	bl	8000304 <_init>
 80002d4:	1ba4      	subs	r4, r4, r6
 80002d6:	10a4      	asrs	r4, r4, #2
 80002d8:	2500      	movs	r5, #0
 80002da:	42a5      	cmp	r5, r4
 80002dc:	d105      	bne.n	80002ea <__libc_init_array+0x2e>
 80002de:	bd70      	pop	{r4, r5, r6, pc}
 80002e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002e4:	4798      	blx	r3
 80002e6:	3501      	adds	r5, #1
 80002e8:	e7ee      	b.n	80002c8 <__libc_init_array+0xc>
 80002ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002ee:	4798      	blx	r3
 80002f0:	3501      	adds	r5, #1
 80002f2:	e7f2      	b.n	80002da <__libc_init_array+0x1e>
 80002f4:	0800031c 	.word	0x0800031c
 80002f8:	0800031c 	.word	0x0800031c
 80002fc:	0800031c 	.word	0x0800031c
 8000300:	08000320 	.word	0x08000320

08000304 <_init>:
 8000304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000306:	bf00      	nop
 8000308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030a:	bc08      	pop	{r3}
 800030c:	469e      	mov	lr, r3
 800030e:	4770      	bx	lr

08000310 <_fini>:
 8000310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000312:	bf00      	nop
 8000314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000316:	bc08      	pop	{r3}
 8000318:	469e      	mov	lr, r3
 800031a:	4770      	bx	lr
